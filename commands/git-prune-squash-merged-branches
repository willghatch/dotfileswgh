#!/usr/bin/env bash

for-each-merged-branch() {
    local f="$1"
    # I didn't write this, I got it from Stack Overflow: https://stackoverflow.com/questions/43489303/how-can-i-delete-all-git-branches-which-have-been-squash-and-merge-via-github
    # IE it's licensed under CC BY-SA 4.0 by Stack Overflow user “Clay”.  Thanks Clay!
    # But I did adapt it a little.
    # Honestly I don't quite understand how this works because I don't know what all of these git commands do, and I'm not going to read the manual right now.
    MBRANCH=master
    USE_MASTER=$(git branch | grep "..master$")
    USE_MAIN=$(git branch | grep "..main$")
    echo $USE_MASTER
    echo $USE_MAIN
    if [[ -n "$USE_MASTER" && -n "$USE_MAIN" ]]; then
        echo "Found both master and main branches, aborting."
        exit 2
    elif [[ -n "$USE_MASTER" ]]; then
        MBRANCH=master
    elif [[ -n "$USE_MAIN" ]]; then
        MBRANCH=main
    else
        echo "Found neithehr master nor main branch, aborting."
        exit 1
    fi
    git checkout -q "$MBRANCH" && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch;
        do
            mergeBase=$(git merge-base "$MBRANCH" $branch) && [[ $(git cherry "$MBRANCH" $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]] && "$f" "$branch"
        done
}

dry-run-handler() {
    echo "$1"
}

wet-run-handler() {
    # This does print something for each branch.
    git branch -D "$1"
}

if [[ "--dry" = "$1" ]]; then
    for-each-merged-branch dry-run-handler
    exit 0
elif [[ "--wet" = "$1" ]]; then
    for-each-merged-branch wet-run-handler
    exit 0
else
    echo usage: "$0" "[--wet|--dry]"
    exit 1
fi


