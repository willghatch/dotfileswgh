#!/usr/bin/env python3

# quick hack to set a keysym on a certain shift level of a single key

import subprocess
import re
import sys

def command_to_string(*args):
    done = subprocess.run(args, stdout=subprocess.PIPE)
    return str(done.stdout, "UTF-8")

def keycode_line_grep(key_num):
    keycodes = command_to_string("xmodmap", "-pke")
    lines = keycodes.split("\n")
    lines_wanted = [line for line in lines if re.match("keycode +"+str(key_num), line)]
    return lines_wanted[0]

def listify_keycode_line(l):
    parts = l.split()
    ns = (["NoSymbol"]*13)
    # add NoSymbol keys to pad out the line to full length
    parts += ns[0:13-len(parts)]
    return parts

def map_level_to_array_index(l):
    # keycode <num> = l1 l2 g2-l1 g2-l2 l3 l4 l5 l6 l7 l8
    if l == 1 or l == 2:
        return l + 2
    elif 2 < l and l < 9:
        return l + 4
    else:
        raise Exception("bad shift level")

def replace_sym(keyline_parts, level, new_symbol):
    keyline_parts[map_level_to_array_index(level)] = new_symbol
    subprocess.run(["xmodmap", "-e", " ".join(keyline_parts)])

def sym_str_to_unicode_point_str(sym_str):
    if len(sym_str) > 1:
        # if the symbol is not just one letter, assume it is correct
        return sym_str
    else:
        return "U{0:04x}".format(ord(sym_str))


if len(sys.argv) < 4:
    print("usage: "+sys.argv[0]+" <key code> <shift level> <new symbol>")
    sys.exit(1)

key_num = int(sys.argv[1])
level = int(sys.argv[2])
newsym = sys.argv[3]

klp = listify_keycode_line(keycode_line_grep(key_num))
replace_sym(klp, level, sym_str_to_unicode_point_str(newsym))

