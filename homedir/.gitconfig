[user]
	email = william@hatch.uno
	name = William G Hatch
[core]
	#excludesfile = ~/dotfileswgh/gitignore_global
  # I don't like setting this globally that much.  I've added a wrapper script alias for calling git diff with delta instead.
  #pager = delta-wrap
[interactive]
  #diffFilter = delta-wrap --color-only
[delta]
  navigate = true
  side-by-side = true
[diff]
  colorMoved = dimmed-zebra
  algorithm = histogram # argued online that it is typically a better diff
  mnemonicPrefix = true # instead of a/ and b/, use prefixes related to current op, like (i)ndex, (w)ork tree, (c)ommit, (o)bject
  renames = true # detect if files have been renamed
[push]
	default = current
  autoSetupRemote = true
  #followTags = true # automatically push tags
[alias]
    # Get and check out pull requests.
    pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    # Gitlab calls them merge-requests and has a different ref name.  Note that remote refs can be listed with `git ls-remote`
    mr  = "!f() { git fetch -fu ${2:-origin} refs/merge-requests/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
    ls = log --oneline --decorate
    lg = log --graph --all --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lf = log -u
    lc = ls-files -u | awk '{print $4}' | sort -u
    shallow = clone --depth 1
    unshallow = fetch --unshallow
    untracked = ls-files --other --directory --exclude-standard
    # These are suggested aliases from Jay.  I'll put theme here but not activate them right now.
    #up = pull --rebase --stat --all
    #undo-commit = reset --soft HEAD^
    #svnst = diff --name-status remotes/git-svn
    #st = status
    #lol = log --graph --decorate --pretty=oneline --abbrev-commit
    #lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    #ci = commit
    #co = checkout
    #svnup = !git svn fetch && git svn rebase
    #new-branch = checkout -b # NewBranch
    #better-branch = reset --hard # BetterBranch

[url "https://github.com/"]
	insteadOf = gh:
[url "git@github.com:"]
	insteadOf = ghk:
	pushInsteadOf = https://github.com/

[include]
	path = ~/dotfileswgh-pri/gitconfig
	path = ~/dotfileswgh-dotlocal/gitconfig

## apparently you have to explicitly tell git to check integrity this way...
## according to https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
[transfer]
        fsckobjects = true
[fetch]
        fsckobjects = true
[receive]
        fsckObjects = true
## lineage OS objects have zero padded filemodes... but I guess it shouldn't be a serious problem?
## BUT there appears to be a git bug such that running git fsck by itself uses this setting, but not
## auto-run git-fsck when doing transfer/fetch/receive... so for now I'll just comment out the above
## settings when dealing with lineage OS.
#[fsck]
#	zeroPaddedFilemode = ignore

[color]
	ui = auto
[column]
  #ui = auto # detect whether to use columns in UI
[branch]
  sort = committerdate # sort by commit date instead of alphabetically
[tag]
  sort = version:refname # sorts treating the tag as a version number

[rebase]
  autoSquash = true # automatically squash commits with specially formatted messages, eg. starting with "squash!", "fixup!", or "amend!"
  autoStash = true # automatically stash and stash pop when rebasing, rather than erroring and requiring manual stash management.  But can create merge conflicts!
  #updateRefs = true # automatically force-update any branches that point to commits that are being rebased.  I don't think I want this as default behavior.

[merge]
  #conflictstyle = zdiff3 # shows both new versions and also old version before changes
[commit]
  verbose = true # show diff in commit message below --- >8 --- scissors line

[rerere]
  # REuse REcorded REsolutions
  # IE record before and after states of rebase conflicts and, with autoupdate, automatically re-apply the resolutions if they are seen again
  enabled = true
  autoupdate = true
