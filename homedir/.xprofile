#!/bin/sh

# This one is the file loaded by NixOS GUI sessions (as opposed to .xsessionrc or .xinitrc or .xsession...)

# Note that this is also loaded by NixOS when starting sway.
# When loading an X11 session, X11 is already running when this is executed.  But when loading sway, this is executed before sway is fully loaded (and thus GUI programs or programs that need to talk to the current display server fail to load if executed here).

export WGHHOME="$HOME"
export DOTFILESWGH="$HOME/dotfileswgh"
source $DOTFILESWGH/env-more.sh
# I used to conditionally source this, but I really don't remember why.
# If I find a reason to do this again, I think I'll reverse the test.


# only load xsession-common if we're in X11.
if [ "$XDG_SESSION_TYPE" = "x11" ]; then
    source $DOTFILESWGH/xsession-common
elif [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    echo "in wayland session..."
    if [ "$XDG_SESSION_DESKTOP" = "sway" ]; then
        # there is gui-session-common stuff, mostly about launching background processes, in gui-session common that sway launches later.
        echo "about to start sway..."
        # maybe I broke something and now I need to manually start sway?  If I start sway here manually, it launches, then when I quit it... it launches again, because the display manager launches it too.  But if I do nothing here, it just hangs for a few seconds and then the display manager comes back.
        # Try just sleeping for a bit to see if it's just some race condition.  This is probably the problem, because this sleep call is fixing things...
        sleep 2
    fi
else
    source $DOTFILESWGH/xsession-common
fi

#source $DOTFILESWGH/xsession-common
#if test -f $DOTFILESWGH/dotlocal/xsession-full; then
#    source $DOTFILESWGH/xsession-common
#else
#    source $DOTFILESWGH/env-more.sh
#fi
